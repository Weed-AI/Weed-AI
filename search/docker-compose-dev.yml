version: "3.3"

x-logging: 
  &default-logging
  driver: "json-file"

services:
  # nginx reverse proxy
  reverse-proxy:
    image: reverse-proxy
    container_name: reverse_proxy
    depends_on:
        - django
        - reactivesearch
    build:
        context: ./nginx/reverse-proxy
    networks:
      - elastic
    logging: *default-logging
    labels:
      - traefik.enable=true
      - traefik.http.services.nginx.loadbalancer.server.port=80
      - traefik.http.routers.nginx.rule=Host(`${HTTP_HOST:-localhost}`)
      - traefik.http.routers.nginx.entrypoints=web
    volumes:
      # Static file service
      - thumbnails_dir:/media/thumbnails
      - download_dir:/media/download
      - mystatic_dir:/media/mystatic

  # django backend
  django:
    image: django
    container_name: django
    depends_on:
      - elasticsearch
      - db
      - redis
    build:
      context: ./django
      dockerfile:  Dockerfile-dev
      args:
        - WEEDCOCO_VERSION=${WEEDCOCO_VERSION:-master}
    environment:
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - CELERY_BROKER=redis://redis:6379/0
      - CELERY_BACKEND=redis://redis:6379/0
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - FROM_EMAIL=${FROM_EMAIL}
      - SEND_EMAIL=${SEND_EMAIL}
      - ENV=DEV
      - TUS_SERVER=http://tus:1080/tus/
      - DJANGO_LOG_LEVEL=DEBUG
    command: python manage.py runserver 0.0.0.0:8000
    entrypoint: /entrypoint.sh
    volumes:
      - ./django/:/code
      - thumbnails_dir:/code/thumbnails
      - repository_dir:/code/repository
      - upload_dir:/code/upload
      - download_dir:/code/download
      - mystatic_dir:/code/mystatic
      - cvat_data:/code/cvat_data
      - tus_dir:/code/tus_dir
    ports:
      - "8000:8000"
    networks:
      - elastic
    logging: *default-logging

  celery:
    image: django
    container_name: celery
    command: celery -A core worker -l INFO
    environment:
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - CELERY_BROKER=redis://redis:6379/0
      - CELERY_BACKEND=redis://redis:6379/0
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - FROM_EMAIL=${FROM_EMAIL}
      - ENV=DEV
    volumes:
      - ./django/:/code
      - thumbnails_dir:/code/thumbnails
      - repository_dir:/code/repository
      - upload_dir:/code/upload
      - download_dir:/code/download
      - tus_dir:/code/tus_dir
    depends_on:
      - django
      - redis
    networks:
      - elastic
    logging: *default-logging

  redis:
    image: redis:alpine
    networks:
      - elastic
    logging: *default-logging

  db:
    image: postgres:12.0-alpine
    container_name: db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    networks:
      - elastic
    logging: *default-logging

  tus:
    image: tusproject/tusd
    container_name: tus
    networks:
      - elastic
    ports:
      - "1080:1080"
    volumes:
      - tus_dir:/srv/tusd-data
    command: -behind-proxy -base-path /tus/files/

  # search engine
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.16.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - http.port=9200
      - http.cors.enabled=true
      # - http.cors.allow-origin=http://localhost:1358,http://127.0.0.1:1358,http://localhost:1337,http://127.0.0.1:1337,http://localhost:8000
      - http.cors.allow-origin=*
      - http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization
      - http.cors.allow-credentials=true
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - elastic
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --silent --fail localhost:9200/_cluster/health || exit 1",
        ]
      interval: 30s
      timeout: 30s
      retries: 3
    logging: *default-logging

  reactivesearch:
    image: my-reactivesearch
    container_name: reactivesearch
    build:
      context: .
      dockerfile:  Dockerfile-dev
    volumes:
       - ./:/code # for development, unused in production
       - /code/node_modules # an exception from the above volume
    ports:
      - "8081:80"
    environment:
      - NODE_ENV=development
    networks:
      - elastic
    stdin_open: true
    depends_on:
      - elasticsearch
    logging: *default-logging

  cvat_db:
    container_name: weedai_cvat_db
    image: postgres:10-alpine
    restart: always
    environment:
      POSTGRES_USER: root
      POSTGRES_DB: cvat
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - cvat_db:/var/lib/postgresql/data
    networks:
      - elastic

  cvat_redis:
    container_name: weedai_cvat_redis
    image: redis:4.0-alpine
    restart: always
    networks:
      - elastic

  cvat:
    container_name: weedai_cvat_server
    image: cvat_server
    restart: always
    build:
      context: cvat
      dockerfile: Dockerfile
    depends_on:
      - cvat_redis
      - cvat_db
    environment:
      DJANGO_MODWSGI_EXTRA_ARGS: ''
      ALLOWED_HOSTS: '*'
      CVAT_REDIS_HOST: 'cvat_redis'
      CVAT_POSTGRES_HOST: 'cvat_db'
      ADAPTIVE_AUTO_ANNOTATION: 'false'
      BASENAME: ${CVAT_BASEPATH}
      DJANGO_AUTH_DEFAULT_GROUPS: ${DJANGO_AUTH_DEFAULT_GROUPS}
    ports:
      - "8080:8080"
    labels:
      - traefik.enable=true
      - traefik.http.services.cvat.loadbalancer.server.port=8080
      - traefik.http.routers.cvat.rule=Host(`${HTTP_HOST:-localhost}`) &&
          PathPrefix(`${CVAT_BASEPATH}/api/`, `${CVAT_BASEPATH}/git/`, `${CVAT_BASEPATH}/opencv/`, `${CVAT_BASEPATH}/analytics/`, `${CVAT_BASEPATH}/static/`, `${CVAT_BASEPATH}/admin`, `${CVAT_BASEPATH}/documentation/`, `${CVAT_BASEPATH}/django-rq`)
      - traefik.http.routers.cvat.entrypoints=web
      - traefik.http.routers.cvat.middlewares=add-cvat
      - traefik.http.middlewares.add-cvat.stripprefix.prefixes=${CVAT_BASEPATH}
      - traefik.http.middlewares.add-cvat.stripprefix.forceSlash=true
    volumes:
      - cvat_data:/home/django/data
      - cvat_keys:/home/django/keys
      - cvat_logs:/home/django/logs
    networks:
      - elastic

  cvat_ui:
    container_name: weedai_cvat_ui
    image: cvat_cvat_ui
    restart: always
    build:
      context: cvat
      dockerfile: Dockerfile.ui
    depends_on:
      - cvat
    environment:
      BASENAME: ${CVAT_BASEPATH}
    labels:
      - traefik.enable=true
      - traefik.http.services.cvat-ui.loadbalancer.server.port=80
      - traefik.http.routers.cvat-ui.rule=Host(`${HTTP_HOST:-localhost}`) &&
          PathPrefix(`${CVAT_BASEPATH}`, `/cvat-static`)
      - traefik.http.routers.cvat-ui.entrypoints=web
      - traefik.http.routers.cvat-ui.middlewares=add-cvat-ui
      - traefik.http.middlewares.add-cvat-ui.stripprefix.prefixes=${CVAT_BASEPATH}
      - traefik.http.middlewares.add-cvat-ui.stripprefix.forceSlash=true
    networks:
      - elastic

  traefik:
    image: traefik:v2.4
    container_name: weedai_traefik
    restart: always
    command:
      - "--providers.docker.exposedByDefault=true"
      - "--providers.docker.network=elastic"
      - "--entryPoints.web.address=:80"
    # Uncomment to get Traefik dashboard
      - "--entryPoints.dashboard.address=:8090"
      - "--api.dashboard=true"
    labels:
      - traefik.enable=true
      - traefik.http.routers.dashboard.entrypoints=dashboard
      - traefik.http.routers.dashboard.service=api@internal
      - traefik.http.routers.dashboard.rule=Host(`${HTTP_HOST:-localhost}`)
    ports:
      - 80:80
      - 8090:8090
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - elastic

networks:
  elastic:
    driver: bridge

volumes:
  esdata1:
    driver: local
  postgres_data:
    driver: local
  repository_dir:
    driver: local
  thumbnails_dir:
    driver: local
  download_dir:
    driver: local
  upload_dir:
    driver: local
  mystatic_dir:
    driver: local
  cvat_db:
  cvat_data:
    driver: local
  cvat_keys:
  cvat_logs:
  tus_dir:
    driver: local
